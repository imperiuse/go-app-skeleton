-- noinspection SqlResolveForFile @ routine/"uuid_generate_v4"

BEGIN;

-- NB! THIS ONLY FOR PRODUCTION
-- FOR STAGE AND PRODUCTION PLEASE CHECK ALSO `development/devdb/devdb.go` file TOO!!!

-- NB! IMPORTANT THIS EXTENSION ("uuid-ossp") MUST BE INSTALL MANUALLY IN PROD DB !!!

---- To install the uuid-ossp module, you use the CREATE EXTENSION statement as follows:
-- CREATE EXTENSION IF NOT EXISTS "uuid-ossp"; -- for uuid v4

-- Begin Table for Authorization
CREATE TABLE IF NOT EXISTS users
(
    id           INTEGER     PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    created_at   TIMESTAMP   NOT NULL DEFAULT NOW(),
    updated_at   TIMESTAMP   NOT NULL DEFAULT NOW(),

    name            TEXT        NOT NULL,
    email           TEXT        NOT NULL UNIQUE,       -- this field with index
    password        CHAR(62)    NOT NULL,              -- bgrypt here (60 byte + but plus 2 needed)
    pswd_help_hint  TEXT        NOT NULL DEFAULT '',   -- help hint for pswd

    ava_url         TEXT        NOT NULL DEFAULT '',   -- link to img for user ava

    description     TEXT        NOT NULL DEFAULT ''    -- for special purpose desc user
);
CREATE INDEX idx__users__email ON users (email);
COMMENT ON TABLE users IS 'Таблица Пользователей (Users) - Пользователи системы';

CREATE TABLE IF NOT EXISTS roles
(
    id           INTEGER     PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    created_at   TIMESTAMP   NOT NULL DEFAULT NOW(),
    updated_at   TIMESTAMP   NOT NULL DEFAULT NOW(),

    name         TEXT        NOT NULL,
    rights       SMALLINT    NOT NULL CHECK (rights > 0)
);
COMMENT ON TABLE roles IS 'Таблица Ролей (Roles) - Роли пользователей системы';


CREATE TABLE IF NOT EXISTS users_roles
(
    id           INTEGER     PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    created_at   TIMESTAMP   NOT NULL DEFAULT NOW(),
    updated_at   TIMESTAMP   NOT NULL DEFAULT NOW(),

    user_id      INTEGER    NOT NULL,
    role_id      INTEGER    NOT NULL,

    CONSTRAINT fkey__users_roles__user_id FOREIGN KEY (user_id)
        REFERENCES users (id) MATCH SIMPLE
        ON UPDATE NO ACTION ON DELETE CASCADE,

    CONSTRAINT fkey__users_roles__role_id FOREIGN KEY (role_id)
        REFERENCES roles (id) MATCH SIMPLE
        ON UPDATE NO ACTION ON DELETE CASCADE

);
COMMENT ON TABLE users_roles IS 'Таблица Ролей (Roles) - Роли пользователей системы';

CREATE TABLE IF NOT EXISTS sessions
(
    id           INTEGER      PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    created_at   TIMESTAMP    NOT NULL DEFAULT NOW(),
    expired_at   TIMESTAMP    NOT NULL DEFAULT NOW() + interval '1 hour',

    user_id      INTEGER      NOT NULL, -- this filed with idx
    ip           INET         NOT NULL DEFAULT '127.0.0.1',

    identifier   CHAR(32)  NOT NULL,  -- this filed with idx
    h_verifier   CHAR(64)  NOT NULL,  -- hash of verifier

    CONSTRAINT fkey__sessions__user_id FOREIGN KEY (user_id)
        REFERENCES users (id) MATCH SIMPLE
        ON UPDATE NO ACTION ON DELETE CASCADE
);

CREATE INDEX idx__sessions__identifier ON sessions (identifier);
CREATE INDEX idx__sessions__user_id ON sessions (user_id);

COMMENT ON TABLE sessions IS 'Таблица Сессий (Sessions) - Роли сессий пользователей системы';

-- End Tables for Authorization




COMMIT;
